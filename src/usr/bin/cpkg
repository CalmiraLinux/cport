#!/bin/bash
#
# CPkg - an automated packaging tool for Calmira Linux
# Copyright (C) 2021 Michail Krasnov
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Project Page: http://github.com/Linuxoid85/cpkg
# Michail Krasnov (aka Linuxoid85) michail383krasnov@mail.ru
#

#==================================================================#
#
# LOAD SCRIPT CONFIGURATIONS
#

# CONF - configuration directory
# SOURCE - a mirror of Calmira
CONF=/etc/cpkg
SOURCE=$CONF/pkg.list
DATABASE=/var/db/cpkg
QUIET="false"	# turn off quiet mode (default)
DBG="false"	# turn off debug mode (default)
CLEAN="false"	# turn off cleaning cache (default)
NAME_FILE="cpkg"

# Setting up a cpkg locale
if [ -z $LANG ]; then
	if [ -z $LC_ALL ]; then
		echo -e "\e[1;31mERROR: \e[35m\$LC_ALL\e[0m\e[1;31m and \e[0m\e[35m\$LANG\e[0m\e[1;31m variables DOESNT EXISTS! \e[0m"
		exit 1
	else
		export LANG=$LC_ALL
	fi
fi

if [ -f "/usr/share/cpkg/locale/$LANG.sh" ]; then
	source /usr/share/cpkg/locale/$LANG.sh
else
	echo -e "\e[1;31mERROR: locale $LANG.sh doesn't exists!"
	export LANG=ru_RU-UTF-8			# Export default variable
	if [ -f /usr/share/cpkg/locale/$LANG.sh ]; then
		source /usr/share/locale/$LANG.sh	# Source default locale file
	else
		exit 1
	fi
fi

# Source a default files and libs
for FUNC in "other-functions.sh" "core-functions.sh" "meta-functions.sh"; do
	if [ -f "/usr/lib/cpkg/$FUNC" ]; then
		source /usr/lib/cpkg/$FUNC	# Load the additional/other cpkg functions
	else
		echo -e "$ERROR_NO_FUNC"
		exit 1
	fi
done

if [[ $(whoami) -eq "root" ]]; then	# get log directory
	LOG_DIR=/var/log/
else
	LOG_DIR=~/.local/share/cpkg/log
	if test -d $LOG_DIR; then
		print_dbg_msg "$DONE"
	else
		print_dbg_msg "$RETRY"
		mkdir -p $LOG_DIR
	fi
fi

print_dbg_msg "testing cpkg files... "
for FUNC in "/etc/cpkg/settings" "/etc/cpkg/repo.list" "/etc/CalmiraVersion"; do
	if [ -f "$FUNC" ]; then
		print_dbg_msg "$DONE"
		source $FUNC
	else
		print_dbg_msg "$FAIL"
	fi
done

check_file	# Checking base dirs and files

#==================================================================#
#
# COMMAND LINE PARSING
#

if [ $# -eq 0 ]; then
	help_pkg
fi

# Options
while [ -n "$1" ]; do
	case "$1" in
		md_check)
			test_root
			check_md noinstall $2
			exit 0
		;;
		
		install|-i)
			test_root
			echo -e "[ $(date) ] [ $ACTION_INSTALL $2 ]\n" >> $LOG_DIR/history.log

			# Clean package cache
			if [ $CLEAN = "true" ]; then
				print_dbg_msg "clean package cache..."
				cpkg_clean cache && cpkg_clean source
			fi
			
			search_pkg $2	# Search the package
			unpack_pkg $2	# Unpack the package
			cd /var/cache/cpkg/archives
			install_pkg $2
			exit 0
		;;

		remove|-r)
			test_root
			echo -e "[ $(date) ] [ $ACTION_REMOVE $2 ]\n" >> $LOG_DIR/history.log
			remove_pkg $2	# Remove
			exit 0
		;;
		
		local_repo)
			test_root
      		    if [ -f /usr/bin/git ]; then
		        mkdir -pv /var/cache/cpkg/localrepo
		        cd /var/cache/cpkg/localrepo
		        
		        git clone https://github.com/Linuxoid85/cpkg_packages
		        
		        if test -d "cpkg_packages"; then
		        	print_msg "$DONE"
		        else
		        	print_msg "$FAIL"
		        fi
		    else
                	PACKAGE=git
		        print_msg "$ERROR_PACKAGE_NOT_INSTALLED"
		        unset PACKAGE
		        exit 0
		    fi
		;;

		list|-l)
			echo -e "[ $(date) ] [ $ACTION_LIST ]\n" >> $LOG_DIR/history.log
			file_list
			exit 0
		;;
		
		blacklist)
			echo -e "[ $(date) ] [ $ACTION_BLACKLIST ]\n" >> $LOG_DIR/history.log
			blacklist_pkg add $2
			exit 0
		;;

		search|-s)
			echo -e "[ $(date) ] [ $ACTION_SEARCH $2 ]\n" >> $LOG_DIR/history.log
			file_search $2
			exit 0
		;;

		info|-I)
			echo -e "[ $(date) ] [ $ACTION_INFO $2 ]\n" >> $LOG_DIR/history.log
			package_info $2
			if [ $2 = "system" ]; then
				about
			fi
			exit 0
		;;
		
		GetMeta)	## Получение копии метаданных для
				## формирования пакета с определённой программой
			GetCopyMetadata
			if [ -f "metadata.old" ]; then
				echo -e "\e[32m$METADATA_IS_CREATED\e[0m"
			else
				echo -e "\e[1;31m$ERROR $METADATA_IS_NOT_CREATED\e[0m"
				exit 0
			fi
			
			mkdir -v metadata
			mv -v metadata.old metadata/metadata
			tar -cvf metadata.xz metadata -J
			rm -rvf metadata
		;;

		clean|-C)
			test_root
			echo -e "[ $(date) ] [ $ACTION_CLEAN ]\n" >> $LOG_DIR/history.log
			for CLEAN_TYPE in "cache" "source" "log"; do
				print_msg "$CLEAN_MSG $CLEAN_TYPE..."
				cpkg_clean $CLEAN_TYPE
			done
		;;
		
		history|-H)
			cat $LOG_DIR/history.log
		;;

		help|-h)
			help_pkg
		;;
		
		--version|-v)
			echo "$VERSION"
		;;
		
		--quiet)
			export QUIET="true"
		;;
		
		--debug)
			export DBG="true"
		;;


		### INSTALL AND REMOVE OPTIONS ###

		--clean|-c)	# Clean cache before installation
			export CLEAN="true"
		;;
		
		unset-variables)
			unset {QUIET,DBG,CLEAN}
		;;
		
		### OTHER OPTIONS ###

		*)	# Error of typing
			echo -e "[ $(date) ] [ $ACTION_UKNOWN_OPTION '$@' ]\n" >> $LOG_DIR/history.log
			echo -e "$ERROR_NO_OPTION"
			help_pkg
			exit 1
		;;
	esac
	shift
	#exit 0
done		
